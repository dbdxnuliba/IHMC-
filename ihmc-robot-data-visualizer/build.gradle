plugins {
   id("us.ihmc.ihmc-build") version "0.16.5"
   id("us.ihmc.ihmc-ci") version "4.25"
   id("us.ihmc.ihmc-cd") version "0.1"
   id("us.ihmc.log-tools") version "0.3.1"
   id("us.ihmc.scs") version "0.4"
   id "org.hidetake.ssh" version "2.9.0"
   id "application"
}

ihmc {
   loadProductProperties("../product.properties")

   configureDependencyResolution()
   configurePublications()
}

mainDependencies {
   compile group: "net.sf.trove4j", name: "trove4j", version: "3.0.3"
   compile group: "com.martiansoftware", name: "jsap", version: "2.1"
   compile group: "net.sourceforge.jmatio", name: "jmatio", version: "1.0"

   compile group: "us.ihmc", name: "euclid", version: "0.12.0"
   compile group: "us.ihmc", name: "ihmc-yovariables", version: "0.3.11"
   compile group: "us.ihmc", name: "ihmc-video-codecs", version: "2.1.5"
   compile group: "us.ihmc", name: "ihmc-commons", version: "0.26.6"
   compile group: "us.ihmc", name: "simulation-construction-set", version: "0.12.15"
   compile group: "us.ihmc", name: "ihmc-javafx-toolkit", version: "0.12.9"
   compile group: "us.ihmc", name: "ihmc-graphics-description", version: "0.12.12"
   compile group: "us.ihmc", name: "ihmc-robot-description", version: "0.12.7"
   compile group: "us.ihmc", name: "ihmc-model-file-loader", version: "source"
   compile group: "us.ihmc", name: "ihmc-communication", version: "source"
   compile group: "us.ihmc", name: "ihmc-java-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-humanoid-robotics", version: "source"
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-robot-data-logger", version: "source"
}

testDependencies {
    compile group: "us.ihmc", name: "ihmc-robotics-toolkit-test", version: "source"
}

mainClassName = hasProperty("mainClass") ? mainClass : "us.ihmc.robotDataVisualizer.visualizer.SCSVisualizer"

if (ihmc.isBuildRoot())
{
   task viewerStartScripts(type: CreateStartScripts) {
      outputDir = file("build/scripts")
      mainClassName = "us.ihmc.robotDataVisualizer.gui.GUICaptureViewer"
      applicationName = "IHMCGUICaptureViewer"
      classpath = project.configurations.runtime + jar.outputs.files
   }

   distributions {
      guiCaptureViewer {
         baseName = "IHMCGUICaptureViewer"
         contents {
            into("lib") {
               from project.configurations.runtime + jar.outputs.files
            }

            into("bin") {
               from viewerStartScripts
               include "IHMCGUICaptureViewer*"
            }
         }
      }
   }

   task setupDeployViewerRemote {
      doLast {
         def deployViewerUserValue = project.hasProperty("deployViewerUser") ? project.deployViewerUser : "invalid"
         def deployViewerPasswordValue = project.hasProperty("deployViewerPassword") ? project.deployViewerPassword : "invalid"
         def deployViewerHostValue = project.hasProperty("deployViewerHost") ? project.deployViewerHost : "invalid"

         remotes.create("deployViewerTarget") {
            host = deployViewerHostValue
            user = deployViewerUserValue
            password = deployViewerPasswordValue
            knownHosts = allowAnyHosts
         }
      }
   }

   task deployViewer(dependsOn: [guiCaptureViewerDistTar, setupDeployViewerRemote]) {
      doLast {
         ssh.run {
            session(remotes.deployViewerTarget) {
               project.logger.lifecycle("Copying GUI Capture Viewer distribution tarball to remote host")
               def distTarFile = guiCaptureViewerDistTar.outputs.files.singleFile
               put from: distTarFile, into: "."

               project.logger.lifecycle("Untarring distribution on remote host")
               execute "tar xf ./${distTarFile.name}"
               project.logger.lifecycle("Removing tarball from remote host")
               execute "rm -f ./${distTarFile.name}"
               project.logger.lifecycle("Moving GUI Capture Viewer distribution in to place")
               execute "mv ./${distTarFile.name.replace(".tar", "")} IHMCGUICaptureViewer"
               project.logger.lifecycle("GUI Capture Viewer deployment to remote host complete!")
            }
         }
      }
   }
}
