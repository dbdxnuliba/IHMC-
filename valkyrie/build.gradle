plugins {
   id("us.ihmc.ihmc-build") version "0.16.5"
   id("us.ihmc.ihmc-ci") version "4.25"
   id("us.ihmc.ihmc-cd") version "0.1"
   id("us.ihmc.scs") version "0.4"
   id("us.ihmc.log-tools") version "0.3.1"
   id("org.hidetake.ssh") version "2.9.0"
   id "application"
}

ihmc {
   loadProductProperties("../product.properties")

   configureDependencyResolution()
   configurePublications()
}

mainDependencies {
   compile group: "com.martiansoftware", name: "jsap", version: "2.1"
   compile group: "org.yaml", name: "snakeyaml", version: "1.17" //1.11
   compile group: "org.ejml", name: "core", version: "0.30"
   compile group: "org.ejml", name: "simple", version: "0.30"
   compile group: "org.ejml", name: "dense64", version: "0.30"
   compile group: "com.esotericsoftware.minlog", name: "minlog", version: "1.2"
   compile group: "org.apache.commons", name: "commons-lang3", version: "3.8.1"
   compile group: "us.ihmc.thirdparty.jinput", name: "jinput", version: "190214"
   compile group: "org.ros.rosjava_bootstrap", name: "message_generation", version: "0.2.1"
   compile group: "org.ros.rosjava_messages", name: "std_msgs", version: "0.5.9"

   compile group: "us.ihmc", name: "euclid", version: "0.12.0"
   compile group: "us.ihmc", name: "ihmc-yovariables", version: "0.3.11"
   compile group: "us.ihmc", name: "ihmc-realtime", version: "1.2.6"
   compile group: "us.ihmc", name: "IHMCRosControl", version: "0.5.0", changing: true
   compile group: "us.ihmc", name: "ihmc-commons", version: "0.26.6"
   compile group: "us.ihmc", name: "ihmc-jmonkey-engine-toolkit", version: "0.12.8"
   compile group: "us.ihmc", name: "simulation-construction-set", version: "0.12.15"
   compile group: "us.ihmc", name: "ihmc-graphics-description", version: "0.12.12"
   compile group: "us.ihmc", name: "ihmc-robot-description", version: "0.12.7"
   compile group: "us.ihmc", name: "ihmc-communication", version: "source"
   compile group: "us.ihmc", name: "ihmc-humanoid-robotics", version: "source"
   compile group: "us.ihmc", name: "ihmc-system-identification", version: "source"
   compile group: "us.ihmc", name: "ihmc-state-estimation", version: "source"
   compile group: "us.ihmc", name: "ihmc-common-walking-control-modules", version: "source"
   compile group: "us.ihmc", name: "ihmc-avatar-interfaces", version: "source"
   compile group: "us.ihmc", name: "ihmc-ros-tools", version: "source"
   compile group: "us.ihmc", name: "ihmc-robot-data-logger", version: "source"
   compile group: "us.ihmc", name: "ihmc-model-file-loader", version: "source"
   compile group: "us.ihmc", name: "ihmc-sensor-processing", version: "source"
   compile group: "us.ihmc", name: "ihmc-perception", version: "source"
   compile group: "us.ihmc", name: "ihmc-whole-body-controller", version: "source"
   compile group: "us.ihmc", name: "ihmc-java-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-robot-models", version: "source"
   compile group: "us.ihmc", name: "ihmc-robot-data-visualizer", version: "source"
   compile group: "us.ihmc", name: "ihmc-simulation-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-footstep-planning-visualizers", version: "source"
   compile group: "us.ihmc", name: "ihmc-avatar-interfaces-behavior-fx-ui", version: "source"
}

testDependencies {

   compile group: "us.ihmc", name: "ihmc-commons-testing", version: "0.26.6"
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit-test", version: "source"
   compile group: "us.ihmc", name: "ihmc-avatar-interfaces-test", version: "source"
}

applicationName = "IHMCValkyrieJoystickApplication"
mainClassName = "us.ihmc.valkyrie.joystick.ValkyrieJoystickBasedSteppingApplication"

task deployOCUApplications(dependsOn: installDist) {
   doLast {
      def ocuApplications = "ihmc_apps/valkyrie"
      def home = new File(System.properties["user.home"])
      def dest = new File(home, ocuApplications)
      dest.deleteDir();
      dest.mkdirs();
      copy {
         from "${buildDir}/install/" + applicationName
         into dest
      }

      println "-------------------------------------------------------------------------"
      println "------- Deployed files to: " + dest.getPath() + " -------"
      println "-------------------------------------------------------------------------"
   }
}

if (ihmc.isBuildRoot())
{
   remotes {
      valkyrieRealtimeComputer {
         host = project.hasProperty("valkyrie_link_ip") ? "${valkyrie_link_ip}" : "invalid"

         // Set the username and password in ~/.gradle/gradle.properties.
         user = project.hasProperty("valkyrie_realtime_username") ? "${valkyrie_realtime_username}" : "invalid"
         password = project.hasProperty("valkyrie_realtime_password") ? "${valkyrie_realtime_password}" : "invalid"

         knownHosts = allowAnyHosts
      }

      valkyrieNonRealtimeComputer {
         host = project.hasProperty("valkyrie_zelda_ip") ? "${valkyrie_zelda_ip}" : "invalid"

         // Set the username and password in ~/.gradle/gradle.properties.
         user = project.hasProperty("valkyrie_realtime_username") ? "${valkyrie_realtime_username}" : "invalid"
         password = project.hasProperty("valkyrie_realtime_password") ? "${valkyrie_realtime_password}" : "invalid"

         knownHosts = allowAnyHosts
      }
   }

   task deployLocal(dependsOn: jar) {
      ihmc.jarWithLibFolder()
      def directory = "valkyrie"

      doLast {
         def home = new File(System.properties["user.home"])
         def dest = new File(home, directory)
         def configurationDir = new File(home, ".ihmc/Configurations")
         def lib = new File(dest, "lib")
         lib.deleteDir();
         lib.mkdirs();

         configurations.runtime.each {
            if (!it.name.contains("IHMCHumanoidOperatorInterface"))
            {
               def src = file(it)
               copy {
                  from src
                  into lib
               }
            }
         }

         copy {
            from jar.archivePath
            into dest
            rename { fileName -> "ValkyrieController.jar" }
         }

         delete configurationDir
         mkdir configurationDir
         copy {
             from file("saved-configurations/defaultREAModuleConfiguration.txt")
             into configurationDir
         }
      }
   }

   task deploy(dependsOn: jar) {
      def projectDir = project.buildscript.sourceFile.parent
      def directory = "valkyrie"

      doLast {
         if (!project.hasProperty("valkyrie_realtime_username") || !project.hasProperty("valkyrie_realtime_password"))
         {
            println("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
         }

         if (!project.hasProperty("valkyrie_link_ip") || !project.hasProperty("valkyrie_zelda_ip"))
         {
            println("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
         }

         ssh.run {
            session(remotes.valkyrieRealtimeComputer) {
               execute("rm -rf " + directory + "/lib")
               execute("mkdir -p " + directory + "/lib")

               configurations.runtime.each {
                  put from: it, into: directory + "/lib"
               }

               put from: jar.archivePath.path, into: directory + "/ValkyrieController.jar"

               def scriptDir = new File(projectDir, "launchScripts/")
               def scriptDirCollection = files { scriptDir.listFiles() }
               put from: scriptDirCollection, into: directory

               scriptDirCollection.each {
                  execute "chmod 777 " + directory + "/" + it.name
               }
            }

            session(remotes.valkyrieNonRealtimeComputer) {
               execute("rm -rf " + directory + "/lib")
               execute("mkdir -p " + directory + "/lib")

               configurations.runtime.each {
                  put from: it, into: directory + "/lib"
               }

               put from: jar.archivePath, into: directory + "/ValkyrieController.jar"

               execute("rm -rf .ihmc/Configurations")
               execute("mkdir -p .ihmc/Configurations")
               put from: file("saved-configurations/defaultREAModuleConfiguration.txt"), into: ".ihmc/Configurations"

               def scriptDir = new File(projectDir, "launchScripts/")
               def scriptDirCollection = files { scriptDir.listFiles() }
               put from: scriptDirCollection, into: directory

               scriptDirCollection.each {
                  execute "chmod 777 " + directory + "/" + it.name
               }
            }
         }
      }
   }

   task deployNetworkProcessor(dependsOn: jar) {
      def projectDir = project.buildscript.sourceFile.parent
      def directory = "valkyrie"

      doLast {
         if (!project.hasProperty("valkyrie_realtime_username") || !project.hasProperty("valkyrie_realtime_password"))
         {
            println("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
         }

         if (!project.hasProperty("valkyrie_link_ip") || !project.hasProperty("valkyrie_zelda_ip"))
         {
            println("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
         }

         ssh.run {
            session(remotes.valkyrieNonRealtimeComputer) {
               execute("rm -rf " + directory + "/lib")
               execute("mkdir -p " + directory + "/lib")
               execute("mkdir -p " + directory + "/Configurations")

               configurations.runtime.each {
                  put from: it, into: directory + "/lib"
               }

               put from: jar.archivePath, into: directory + "/ValkyrieController.jar"
               
               put from: file("saved-configurations/defaultREAModuleConfiguration.txt"), into: ".ihmc/Configurations"

               def scriptDir = new File(projectDir, "launchScripts/")
               def scriptDirCollection = files { scriptDir.listFiles() }
               put from: scriptDirCollection, into: directory

               scriptDirCollection.each {
                  execute "chmod 777 " + directory + "/" + it.name
               }
            }
         }
      }
   }

//task createRosJar(type: Jar) {
//   def gitRepo;
//   if (!project.parent.hasProperty("repo"))
//   {
//      gitRepo = Grgit.open(projectDir.canonicalFile.parent)
//   } else
//   {
//      gitRepo = project.parent.repo
//   }
//   version = gitRepo.head().abbreviatedId;
//   manifest {
//      attributes "Implementation-Title": "ROSAPI",
//            "Implementation-Version": version,
//            "Main-Class": "us.ihmc.valkyrie.OpenHumanoidsSimulator"
//   }
//
//   baseName = "OpenHumanoidsSimulator"
//   from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
//      exclude "META-INF/*.SF"
//      exclude "META-INF/*.DSA"
//      exclude "META-INF/*.RSA"
//      with jar
//   }
//}

//task OH(type: Copy, dependsOn: [createRosJar]) {
//   from createRosJar
//   into "lib/"
//}
}
